// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  wallets                Wallet[]
  paymentMethods         PaymentMethod[]
  books                  Book[]
  purchases              Purchase[]
  payments               Payment[]
  aiInteractions         AIInteraction[]
  blockchainTransactions BlockchainTransaction[]
  userRoles              UserRole[]
  
  // Enhanced Crowdfunding relationships
  fundingsBacked    Funding[]        @relation("BackerRelation")
  fundingsReceived  Funding[]        @relation("RecipientRelation")
  campaigns         Campaign[]
  campaignGoals     CampaignGoal[]
  fanRequests       FanRequest[]     @relation("FanRequestAuthor")
  fanRequestsMade   FanRequest[]     @relation("FanRequestFan")
  subscriptionsOffered Subscription[] @relation("CreatorSubscription")
  subscriptionsMade    Subscription[] @relation("SubscriberRelation")
  contentUpdates    ContentUpdate[]
  backerProfiles    Backer[]

  @@map("users")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  address   String
  type      String
  network   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relationships
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments               Payment[]
  blockchainTransactions BlockchainTransaction[]

  @@map("wallets")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  userId    String
  type      String
  provider  String
  details   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("payment_methods")
}

model Book {
  id          String   @id @default(uuid())
  title       String
  description String
  cover       String?  // Book cover image URL
  price       Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String

  // Relationships
  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapters       Chapter[]
  purchases      Purchase[]
  bookVersions   BookVersion[]
  aiInteractions AIInteraction[]
  
  // Enhanced Crowdfunding relationships
  fundings       Funding[]
  campaigns      Campaign[]
  fanRequests    FanRequest[]
  contentUpdates ContentUpdate[]

  @@map("books")
}

model Role {
  id          String @id @default(uuid())
  name        String @unique
  description String
  permissions String

  // Relationships
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Chapter {
  id         String   @id @default(uuid())
  title      String
  content    String
  cover      String?  // Chapter cover image URL
  orderIndex Int
  bookId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  book           Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
  aiInteractions AIInteraction[]
  contentUpdates ContentUpdate[]

  @@unique([bookId, orderIndex])
  @@map("chapters")
}

model Purchase {
  id           String   @id @default(uuid())
  buyerId      String
  bookId       String
  amount       Float
  status       String
  purchaseDate DateTime @default(now())

  // Relationships
  buyer    User      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  book     Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@unique([buyerId, bookId])
  @@map("purchases")
}

model Payment {
  id              String   @id @default(uuid())
  purchaseId      String
  userId          String
  amount          Float
  paymentMethod   String
  transactionHash String?
  status          String
  timestamp       DateTime @default(now())

  // Relationships
  purchase              Purchase               @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethodRef      PaymentMethod?         @relation(fields: [paymentMethodId], references: [id])
  wallet                Wallet?                @relation(fields: [walletId], references: [id])
  blockchainTransaction BlockchainTransaction?

  // Foreign keys for optional relationships
  paymentMethodId String?
  walletId        String?

  @@map("payments")
}

model AIAssistant {
  id    String @id @default(uuid())
  model String
  type  String

  // Relationships
  aiInteractions AIInteraction[]

  @@map("ai_assistants")
}

model InteractionType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  isActive    Boolean  @default(true)
  costPerUse  Float
  category    String
  createdAt   DateTime @default(now())

  // Relationships
  aiInteractions AIInteraction[]

  @@map("interaction_types")
}

model AIInteraction {
  id                String   @id @default(uuid())
  userId            String
  bookId            String?
  chapterId         String?
  interactionTypeId String
  query             String
  response          String
  timestamp         DateTime @default(now())

  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  book            Book?           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter         Chapter?        @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  interactionType InteractionType @relation(fields: [interactionTypeId], references: [id], onDelete: Cascade)
  aiAssistant     AIAssistant?    @relation(fields: [aiAssistantId], references: [id])

  // Foreign key for optional relationship
  aiAssistantId String?

  @@map("ai_interactions")
}

model BlockchainTransaction {
  id              String   @id @default(uuid())
  transactionHash String   @unique
  userId          String
  resourceId      String
  resourceType    String
  network         String
  amount          Float
  status          String
  timestamp       DateTime @default(now())

  // Relationships
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet  Wallet?  @relation(fields: [walletId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  // Foreign keys for optional relationships
  walletId  String? @unique
  paymentId String? @unique

  @@map("blockchain_transactions")
}

model BookVersion {
  id          String   @id @default(uuid())
  bookId      String
  versionHash String
  changes     String
  createdAt   DateTime @default(now())

  // Relationships
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("book_versions")
}

// Enhanced Crowdfunding and Fan Support Models
model Funding {
  id          String   @id @default(uuid())
  backerId    String
  recipientId String
  campaignId  String?
  bookId      String?
  amount      Float
  message     String?
  isAnonymous Boolean  @default(false)
  fundingType String   @default("general") // general, book_specific, campaign, tip, commission
  status      String   @default("completed") // completed, pending, failed, refunded
  createdAt   DateTime @default(now())

  // Relationships
  backer    User      @relation("BackerRelation", fields: [backerId], references: [id], onDelete: Cascade)
  recipient User      @relation("RecipientRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  book      Book?     @relation(fields: [bookId], references: [id], onDelete: SetNull)
  campaign  Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@map("fundings")
}

model Campaign {
  id            String   @id @default(uuid())
  creatorId     String
  bookId        String?
  title         String
  description   String
  campaignType  String   @default("book_funding") // book_funding, monthly_support, project_based, commission_pool
  targetAmount  Float
  currentAmount Float    @default(0)
  status        String   @default("active") // active, completed, cancelled, paused, draft
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  book          Book?          @relation(fields: [bookId], references: [id], onDelete: SetNull)
  fundings      Funding[]
  campaignGoals CampaignGoal[]
  backers       Backer[]

  @@map("campaigns")
}

model CampaignGoal {
  id          String    @id @default(uuid())
  campaignId  String
  creatorId   String
  amount      Float
  title       String
  description String
  reward      String?   // What backers get when this goal is reached
  isReached   Boolean   @default(false)
  reachedAt   DateTime?
  createdAt   DateTime  @default(now())

  // Relationships
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("campaign_goals")
}

model FanRequest {
  id          String   @id @default(uuid())
  fanId       String
  authorId    String
  bookId      String?
  requestType String   // "continue_story", "new_chapter", "new_book", "character_development", "alternate_ending"
  title       String
  description String
  offerAmount Float?   // Amount fan is willing to fund if fulfilled
  status      String   @default("pending") // pending, accepted, rejected, completed, in_progress
  priority    Int      @default(0) // Higher numbers = higher priority
  upvotes     Int      @default(0) // Community voting on requests
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  fan    User  @relation("FanRequestFan", fields: [fanId], references: [id], onDelete: Cascade)
  author User  @relation("FanRequestAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  book   Book? @relation(fields: [bookId], references: [id], onDelete: SetNull)

  @@map("fan_requests")
}

model Subscription {
  id           String    @id @default(uuid())
  subscriberId String
  creatorId    String
  tier         String    // "basic", "premium", "vip", "custom"
  monthlyAmount Float
  status       String    @default("active") // active, paused, cancelled, expired
  benefits     String    // JSON string of benefits included
  startDate    DateTime  @default(now())
  endDate      DateTime?
  createdAt    DateTime  @default(now())

  // Relationships
  subscriber User @relation("SubscriberRelation", fields: [subscriberId], references: [id], onDelete: Cascade)
  creator    User @relation("CreatorSubscription", fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, creatorId])
  @@map("subscriptions")
}

model ContentUpdate {
  id           String   @id @default(uuid())
  authorId     String
  bookId       String?
  chapterId    String?
  title        String
  content      String
  updateType   String   @default("general") // general, chapter_release, progress_update, behind_scenes, announcement
  isPublic     Boolean  @default(true)
  tierRequired String?  // Subscription tier required to view (if not public)
  publishedAt  DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relationships
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  book    Book?    @relation(fields: [bookId], references: [id], onDelete: SetNull)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: SetNull)

  @@map("content_updates")
}

model Backer {
  id               String   @id @default(uuid())
  userId           String
  campaignId       String
  totalContributed Float    @default(0)
  backerTier       String   @default("supporter") // supporter, patron, champion, benefactor
  isAnonymous      Boolean  @default(false)
  firstBackedAt    DateTime @default(now())
  lastBackedAt     DateTime @default(now())

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
  @@map("backers")
}